

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Dec 04 00:01:37 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F688
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	swtext1,local,class=CONST,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 1.44
    31                           ; Generated 14/09/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F688 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0007                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0087                     	;# 
    93  008C                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0095                     	;# 
    99  0095                     	;# 
   100  0096                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009A                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0007                     	;# 
   119  000A                     	;# 
   120  000B                     	;# 
   121  000C                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  0081                     	;# 
   139  0085                     	;# 
   140  0087                     	;# 
   141  008C                     	;# 
   142  008E                     	;# 
   143  008F                     	;# 
   144  0090                     	;# 
   145  0091                     	;# 
   146  0095                     	;# 
   147  0095                     	;# 
   148  0096                     	;# 
   149  0096                     	;# 
   150  0097                     	;# 
   151  0098                     	;# 
   152  0099                     	;# 
   153  009A                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0007                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000E                     	;# 
   171  000E                     	;# 
   172  000F                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0013                     	;# 
   177  0014                     	;# 
   178  0015                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  0081                     	;# 
   187  0085                     	;# 
   188  0087                     	;# 
   189  008C                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0095                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0007                     	;# 
   215  000A                     	;# 
   216  000B                     	;# 
   217  000C                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0016                     	;# 
   228  0017                     	;# 
   229  0018                     	;# 
   230  0019                     	;# 
   231  001A                     	;# 
   232  001E                     	;# 
   233  001F                     	;# 
   234  0081                     	;# 
   235  0085                     	;# 
   236  0087                     	;# 
   237  008C                     	;# 
   238  008E                     	;# 
   239  008F                     	;# 
   240  0090                     	;# 
   241  0091                     	;# 
   242  0095                     	;# 
   243  0095                     	;# 
   244  0096                     	;# 
   245  0096                     	;# 
   246  0097                     	;# 
   247  0098                     	;# 
   248  0099                     	;# 
   249  009A                     	;# 
   250  009A                     	;# 
   251  009B                     	;# 
   252  009C                     	;# 
   253  009D                     	;# 
   254  009E                     	;# 
   255  009F                     	;# 
   256  0000                     	;# 
   257  0001                     	;# 
   258  0002                     	;# 
   259  0003                     	;# 
   260  0004                     	;# 
   261  0005                     	;# 
   262  0007                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000E                     	;# 
   267  000E                     	;# 
   268  000F                     	;# 
   269  0010                     	;# 
   270  0011                     	;# 
   271  0012                     	;# 
   272  0013                     	;# 
   273  0014                     	;# 
   274  0015                     	;# 
   275  0016                     	;# 
   276  0017                     	;# 
   277  0018                     	;# 
   278  0019                     	;# 
   279  001A                     	;# 
   280  001E                     	;# 
   281  001F                     	;# 
   282  0081                     	;# 
   283  0085                     	;# 
   284  0087                     	;# 
   285  008C                     	;# 
   286  008E                     	;# 
   287  008F                     	;# 
   288  0090                     	;# 
   289  0091                     	;# 
   290  0095                     	;# 
   291  0095                     	;# 
   292  0096                     	;# 
   293  0096                     	;# 
   294  0097                     	;# 
   295  0098                     	;# 
   296  0099                     	;# 
   297  009A                     	;# 
   298  009A                     	;# 
   299  009B                     	;# 
   300  009C                     	;# 
   301  009D                     	;# 
   302  009E                     	;# 
   303  009F                     	;# 
   304  0000                     	;# 
   305  0001                     	;# 
   306  0002                     	;# 
   307  0003                     	;# 
   308  0004                     	;# 
   309  0005                     	;# 
   310  0007                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  000E                     	;# 
   315  000E                     	;# 
   316  000F                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0013                     	;# 
   321  0014                     	;# 
   322  0015                     	;# 
   323  0016                     	;# 
   324  0017                     	;# 
   325  0018                     	;# 
   326  0019                     	;# 
   327  001A                     	;# 
   328  001E                     	;# 
   329  001F                     	;# 
   330  0081                     	;# 
   331  0085                     	;# 
   332  0087                     	;# 
   333  008C                     	;# 
   334  008E                     	;# 
   335  008F                     	;# 
   336  0090                     	;# 
   337  0091                     	;# 
   338  0095                     	;# 
   339  0095                     	;# 
   340  0096                     	;# 
   341  0096                     	;# 
   342  0097                     	;# 
   343  0098                     	;# 
   344  0099                     	;# 
   345  009A                     	;# 
   346  009A                     	;# 
   347  009B                     	;# 
   348  009C                     	;# 
   349  009D                     	;# 
   350  009E                     	;# 
   351  009F                     	;# 
   352  001E                     _ADRESH	set	30
   353  001F                     _ADCON0bits	set	31
   354  0016                     _TXSTAbits	set	22
   355  0011                     _BAUDCTLbits	set	17
   356  0013                     _SPBRG	set	19
   357  0017                     _RCSTAbits	set	23
   358  0005                     _PORTAbits	set	5
   359  0015                     _TXREG	set	21
   360  000C                     _PIR1bits	set	12
   361  0001                     _TMR0	set	1
   362  000B                     _INTCONbits	set	11
   363  009E                     _ADRESL	set	158
   364  009F                     _ADCON1bits	set	159
   365  008C                     _PIE1bits	set	140
   366  0085                     _TRISAbits	set	133
   367  0087                     _TRISCbits	set	135
   368  0081                     _OPTION_REGbits	set	129
   369  008F                     _OSCCONbits	set	143
   370                           
   371                           ; #config settings
   372  0000                     
   373                           	psect	cinit
   374  0013                     start_initialization:	
   375  0013                     __initialization:	
   376                           
   377                           ; Clear objects allocated to COMMON
   378  0013  01F0               	clrf	__pbssCOMMON& (0+127)
   379  0014  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   380  0015  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   381  0016  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   382  0017  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   383                           
   384                           ; Clear objects allocated to BANK0
   385  0018  1383               	bcf	3,7	;select IRP bank0
   386  0019  3020               	movlw	low __pbssBANK0
   387  001A  0084               	movwf	4
   388  001B  3048               	movlw	low (__pbssBANK0+40)
   389  001C  118A  2211         	fcall	clear_ram0
   390  001E                     end_of_initialization:	
   391                           ;End of C runtime variable initialization code
   392                           
   393  001E                     __end_of__initialization:	
   394  001E  0183               	clrf	3
   395  001F  118A  2A19         	ljmp	_main	;jump to C main() function
   396                           
   397                           	psect	bssCOMMON
   398  0070                     __pbssCOMMON:	
   399  0070                     f_int@txState:	
   400  0070                     	ds	1
   401  0071                     SUP_ADC_management@sequence:	
   402  0071                     	ds	1
   403  0072                     _emission_rdy:	
   404  0072                     	ds	1
   405  0073                     _tx_running:	
   406  0073                     	ds	1
   407  0074                     _endConv:	
   408  0074                     	ds	1
   409                           
   410                           	psect	bssBANK0
   411  0020                     __pbssBANK0:	
   412  0020                     _compteur:	
   413  0020                     	ds	4
   414  0024                     _anData:	
   415  0024                     	ds	18
   416  0036                     _tx_data:	
   417  0036                     	ds	18
   418                           
   419                           	psect	clrtext
   420  0211                     clear_ram0:	
   421                           ;	Called with FSR containing the base address, and
   422                           ;	W with the last address+1
   423                           
   424  0211  0064               	clrwdt	;clear the watchdog before getting into this loop
   425  0212                     clrloop0:	
   426  0212  0180               	clrf	0	;clear RAM location pointed to by FSR
   427  0213  0A84               	incf	4,f	;increment pointer
   428  0214  0604               	xorwf	4,w	;XOR with final address
   429  0215  1903               	btfsc	3,2	;have we reached the end yet?
   430  0216  3400               	retlw	0	;all done for this memory range, return
   431  0217  0604               	xorwf	4,w	;XOR again to restore value
   432  0218  2A12               	goto	clrloop0	;do the next byte
   433                           
   434                           	psect	cstackCOMMON
   435  0075                     __pcstackCOMMON:	
   436  0075                     ?_SUP_Init:	
   437  0075                     ?_SUP_Oper:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0075                     ?_init_osc:	
   441                           ; 1 bytes @ 0x0
   442                           
   443  0075                     ?_init_tmr0:	
   444                           ; 1 bytes @ 0x0
   445                           
   446  0075                     ?_init_io:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  0075                     ?_init_uart:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  0075                     ?_init_adc:	
   453                           ; 1 bytes @ 0x0
   454                           
   455  0075                     ?_SUP_ADC_management:	
   456                           ; 1 bytes @ 0x0
   457                           
   458  0075                     ?_SUP_UART_management:	
   459                           ; 1 bytes @ 0x0
   460                           
   461  0075                     ?_ADC_start_conv:	
   462                           ; 1 bytes @ 0x0
   463                           
   464  0075                     ?_ADC_chan_change:	
   465                           ; 1 bytes @ 0x0
   466                           
   467  0075                     ?_main:	
   468                           ; 1 bytes @ 0x0
   469                           
   470  0075                     ?_f_int:	
   471                           ; 1 bytes @ 0x0
   472                           
   473  0075                     ??_f_int:	
   474                           ; 1 bytes @ 0x0
   475                           
   476                           
   477                           ; 1 bytes @ 0x0
   478  0075                     	ds	5
   479                           
   480                           	psect	cstackBANK0
   481  0048                     __pcstackBANK0:	
   482  0048                     ??_SUP_Init:	
   483  0048                     ??_init_osc:	
   484                           ; 1 bytes @ 0x0
   485                           
   486  0048                     ??_init_tmr0:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0048                     ??_init_io:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0048                     ??_init_uart:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0048                     ??_init_adc:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0048                     ??_ADC_start_conv:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0048                     ??_ADC_chan_change:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0048                     ?_memcpy:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0048                     ?_ADC_get_value:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0048                     memcpy@s1:	
   511                           ; 2 bytes @ 0x0
   512                           
   513                           
   514                           ; 1 bytes @ 0x0
   515  0048                     	ds	1
   516  0049                     ADC_chan_change@ANChannel:	
   517  0049                     memcpy@n:	
   518                           ; 1 bytes @ 0x1
   519                           
   520                           
   521                           ; 2 bytes @ 0x1
   522  0049                     	ds	1
   523  004A                     ??_ADC_get_value:	
   524                           
   525                           ; 1 bytes @ 0x2
   526  004A                     	ds	1
   527  004B                     ??_memcpy:	
   528                           
   529                           ; 1 bytes @ 0x3
   530  004B                     	ds	1
   531  004C                     memcpy@tmp:	
   532  004C                     ADC_get_value@ANvalue:	
   533                           ; 1 bytes @ 0x4
   534                           
   535                           
   536                           ; 2 bytes @ 0x4
   537  004C                     	ds	1
   538  004D                     memcpy@d:	
   539                           
   540                           ; 1 bytes @ 0x5
   541  004D                     	ds	1
   542  004E                     ??_SUP_ADC_management:	
   543  004E                     memcpy@s:	
   544                           ; 1 bytes @ 0x6
   545                           
   546                           
   547                           ; 1 bytes @ 0x6
   548  004E                     	ds	1
   549  004F                     memcpy@d1:	
   550                           
   551                           ; 1 bytes @ 0x7
   552  004F                     	ds	1
   553  0050                     ?_UART_send:	
   554  0050                     UART_send@size:	
   555                           ; 1 bytes @ 0x8
   556                           
   557                           
   558                           ; 1 bytes @ 0x8
   559  0050                     	ds	1
   560  0051                     ??_UART_send:	
   561                           
   562                           ; 1 bytes @ 0x9
   563  0051                     	ds	3
   564  0054                     UART_send@data:	
   565                           
   566                           ; 1 bytes @ 0xC
   567  0054                     	ds	1
   568  0055                     ??_SUP_UART_management:	
   569                           
   570                           ; 1 bytes @ 0xD
   571  0055                     	ds	1
   572  0056                     ??_SUP_Oper:	
   573  0056                     SUP_Oper@latchSequencer:	
   574                           ; 1 bytes @ 0xE
   575                           
   576                           
   577                           ; 4 bytes @ 0xE
   578  0056                     	ds	4
   579  005A                     ??_main:	
   580                           
   581                           	psect	maintext
   582  0219                     __pmaintext:	
   583                           ; 1 bytes @ 0x12
   584 ;;
   585 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   586 ;;
   587 ;; *************** function _main *****************
   588 ;; Defined at:
   589 ;;		line 27 in file "sources/SUP_func.c"
   590 ;; Parameters:    Size  Location     Type
   591 ;;		None
   592 ;; Auto vars:     Size  Location     Type
   593 ;;		None
   594 ;; Return value:  Size  Location     Type
   595 ;;                  1    wreg      void 
   596 ;; Registers used:
   597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   598 ;; Tracked objects:
   599 ;;		On entry : B00/0
   600 ;;		On exit  : 0/0
   601 ;;		Unchanged: 0/0
   602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   603 ;;      Params:         0       0       0       0
   604 ;;      Locals:         0       0       0       0
   605 ;;      Temps:          0       0       0       0
   606 ;;      Totals:         0       0       0       0
   607 ;;Total ram usage:        0 bytes
   608 ;; Hardware stack levels required when called:    5
   609 ;; This function calls:
   610 ;;		_SUP_Init
   611 ;;		_SUP_Oper
   612 ;; This function is called by:
   613 ;;		Startup code after reset
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617                           
   618                           ;psect for function _main
   619  0219                     _main:	
   620                           
   621                           ;SUP_func.c: 29: SUP_Init();
   622                           
   623                           ;incstack = 0
   624                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   625  0219  118A  219A  118A   	fcall	_SUP_Init
   626                           
   627                           ;SUP_func.c: 31: SUP_Oper();
   628  021C  118A  2131         	fcall	_SUP_Oper
   629                           
   630                           ;SUP_func.c: 33: return;
   631  021E  118A  2811         	ljmp	start
   632  0220                     __end_of_main:	
   633                           
   634                           	psect	text1
   635  0131                     __ptext1:	
   636 ;; *************** function _SUP_Oper *****************
   637 ;; Defined at:
   638 ;;		line 54 in file "sources/SUP_func.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;		None
   641 ;; Auto vars:     Size  Location     Type
   642 ;;  latchSequenc    4   14[BANK0 ] unsigned long 
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   647 ;; Tracked objects:
   648 ;;		On entry : 0/0
   649 ;;		On exit  : 0/0
   650 ;;		Unchanged: 0/0
   651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   652 ;;      Params:         0       0       0       0
   653 ;;      Locals:         0       4       0       0
   654 ;;      Temps:          0       0       0       0
   655 ;;      Totals:         0       4       0       0
   656 ;;Total ram usage:        4 bytes
   657 ;; Hardware stack levels used:    1
   658 ;; Hardware stack levels required when called:    4
   659 ;; This function calls:
   660 ;;		_SUP_ADC_management
   661 ;;		_SUP_UART_management
   662 ;; This function is called by:
   663 ;;		_main
   664 ;; This function uses a non-reentrant model
   665 ;;
   666                           
   667                           
   668                           ;psect for function _SUP_Oper
   669  0131                     _SUP_Oper:	
   670                           
   671                           ;SUP_func.c: 56: uint32 latchSequencer = compteur;
   672                           
   673                           ;incstack = 0
   674                           ; Regs used in _SUP_Oper: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   675  0131  1283               	bcf	3,5	;RP0=0, select bank0
   676  0132  1303               	bcf	3,6	;RP1=0, select bank0
   677  0133  0823               	movf	_compteur+3,w	;volatile
   678  0134  00D9               	movwf	SUP_Oper@latchSequencer+3
   679  0135  0822               	movf	_compteur+2,w	;volatile
   680  0136  00D8               	movwf	SUP_Oper@latchSequencer+2
   681  0137  0821               	movf	_compteur+1,w	;volatile
   682  0138  00D7               	movwf	SUP_Oper@latchSequencer+1
   683  0139  0820               	movf	_compteur,w	;volatile
   684  013A  00D6               	movwf	SUP_Oper@latchSequencer
   685  013B                     l1175:	
   686                           ;SUP_func.c: 59: {
   687                           ;SUP_func.c: 60: while(latchSequencer >= compteur);
   688                           
   689                           ;SUP_func.c: 58: while(1)
   690                           
   691  013B  1283               	bcf	3,5	;RP0=0, select bank0
   692  013C  1303               	bcf	3,6	;RP1=0, select bank0
   693  013D  0823               	movf	_compteur+3,w	;volatile
   694  013E  0259               	subwf	SUP_Oper@latchSequencer+3,w
   695  013F  1D03               	skipz
   696  0140  294B               	goto	u365
   697  0141  0822               	movf	_compteur+2,w	;volatile
   698  0142  0258               	subwf	SUP_Oper@latchSequencer+2,w
   699  0143  1D03               	skipz
   700  0144  294B               	goto	u365
   701  0145  0821               	movf	_compteur+1,w	;volatile
   702  0146  0257               	subwf	SUP_Oper@latchSequencer+1,w
   703  0147  1D03               	skipz
   704  0148  294B               	goto	u365
   705  0149  0820               	movf	_compteur,w	;volatile
   706  014A  0256               	subwf	SUP_Oper@latchSequencer,w
   707  014B                     u365:	
   708  014B  1803               	skipnc
   709  014C  293B               	goto	l1175
   710                           
   711                           ;SUP_func.c: 61: latchSequencer = compteur;
   712  014D  0823               	movf	_compteur+3,w	;volatile
   713  014E  00D9               	movwf	SUP_Oper@latchSequencer+3
   714  014F  0822               	movf	_compteur+2,w	;volatile
   715  0150  00D8               	movwf	SUP_Oper@latchSequencer+2
   716  0151  0821               	movf	_compteur+1,w	;volatile
   717  0152  00D7               	movwf	SUP_Oper@latchSequencer+1
   718  0153  0820               	movf	_compteur,w	;volatile
   719  0154  00D6               	movwf	SUP_Oper@latchSequencer
   720                           
   721                           ;SUP_func.c: 63: SUP_ADC_management();
   722  0155  118A  2021  118A   	fcall	_SUP_ADC_management
   723                           
   724                           ;SUP_func.c: 65: SUP_UART_management();
   725  0158  118A  21C1  118A   	fcall	_SUP_UART_management
   726  015B  293B               	goto	l1175
   727  015C                     __end_of_SUP_Oper:	
   728                           
   729                           	psect	text2
   730  01C1                     __ptext2:	
   731 ;; *************** function _SUP_UART_management *****************
   732 ;; Defined at:
   733 ;;		line 136 in file "sources/SUP_func.c"
   734 ;; Parameters:    Size  Location     Type
   735 ;;		None
   736 ;; Auto vars:     Size  Location     Type
   737 ;;		None
   738 ;; Return value:  Size  Location     Type
   739 ;;                  1    wreg      void 
   740 ;; Registers used:
   741 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   747 ;;      Params:         0       0       0       0
   748 ;;      Locals:         0       0       0       0
   749 ;;      Temps:          0       1       0       0
   750 ;;      Totals:         0       1       0       0
   751 ;;Total ram usage:        1 bytes
   752 ;; Hardware stack levels used:    1
   753 ;; Hardware stack levels required when called:    3
   754 ;; This function calls:
   755 ;;		_UART_send
   756 ;; This function is called by:
   757 ;;		_SUP_Oper
   758 ;; This function uses a non-reentrant model
   759 ;;
   760                           
   761                           
   762                           ;psect for function _SUP_UART_management
   763  01C1                     _SUP_UART_management:	
   764                           
   765                           ;SUP_func.c: 138: if(emission_rdy && !tx_running)
   766                           
   767                           ;incstack = 0
   768                           ; Regs used in _SUP_UART_management: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   769  01C1  0872               	movf	_emission_rdy,w
   770  01C2  1903               	btfsc	3,2
   771  01C3  0008               	return
   772  01C4  0873               	movf	_tx_running,w
   773  01C5  1D03               	btfss	3,2
   774  01C6  0008               	return
   775                           
   776                           ;SUP_func.c: 139: {
   777                           ;SUP_func.c: 140: emission_rdy = 0;
   778  01C7  01F2               	clrf	_emission_rdy
   779                           
   780                           ;SUP_func.c: 141: UART_send(anData, sizeof(anData));
   781  01C8  3012               	movlw	18
   782  01C9  1283               	bcf	3,5	;RP0=0, select bank0
   783  01CA  1303               	bcf	3,6	;RP1=0, select bank0
   784  01CB  00D5               	movwf	??_SUP_UART_management
   785  01CC  0855               	movf	??_SUP_UART_management,w
   786  01CD  00D0               	movwf	UART_send@size
   787  01CE  3024               	movlw	(low (_anData| 0))& (0+255)
   788  01CF  118A  217C         	fcall	_UART_send
   789  01D1  0008               	return
   790  01D2                     __end_of_SUP_UART_management:	
   791                           
   792                           	psect	text3
   793  017C                     __ptext3:	
   794 ;; *************** function _UART_send *****************
   795 ;; Defined at:
   796 ;;		line 38 in file "sources/SYS_uart.c"
   797 ;; Parameters:    Size  Location     Type
   798 ;;  data            1    wreg     PTR struct .
   799 ;;		 -> anData(18), 
   800 ;;  size            1    8[BANK0 ] unsigned char 
   801 ;; Auto vars:     Size  Location     Type
   802 ;;  data            1   12[BANK0 ] PTR struct .
   803 ;;		 -> anData(18), 
   804 ;; Return value:  Size  Location     Type
   805 ;;                  1    wreg      void 
   806 ;; Registers used:
   807 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   808 ;; Tracked objects:
   809 ;;		On entry : 0/0
   810 ;;		On exit  : 0/0
   811 ;;		Unchanged: 0/0
   812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   813 ;;      Params:         0       1       0       0
   814 ;;      Locals:         0       1       0       0
   815 ;;      Temps:          0       3       0       0
   816 ;;      Totals:         0       5       0       0
   817 ;;Total ram usage:        5 bytes
   818 ;; Hardware stack levels used:    1
   819 ;; Hardware stack levels required when called:    2
   820 ;; This function calls:
   821 ;;		_memcpy
   822 ;; This function is called by:
   823 ;;		_SUP_UART_management
   824 ;; This function uses a non-reentrant model
   825 ;;
   826                           
   827                           
   828                           ;psect for function _UART_send
   829  017C                     _UART_send:	
   830                           
   831                           ;incstack = 0
   832                           ; Regs used in _UART_send: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   833                           ;UART_send@data stored from wreg
   834  017C  1283               	bcf	3,5	;RP0=0, select bank0
   835  017D  1303               	bcf	3,6	;RP1=0, select bank0
   836  017E  00D4               	movwf	UART_send@data
   837                           
   838                           ;SYS_uart.c: 40: memcpy(tx_data,data,size);
   839  017F  0854               	movf	UART_send@data,w
   840  0180  00D1               	movwf	??_UART_send
   841  0181  0851               	movf	??_UART_send,w
   842  0182  00C8               	movwf	memcpy@s1
   843  0183  0850               	movf	UART_send@size,w
   844  0184  00D2               	movwf	??_UART_send+1
   845  0185  01D3               	clrf	??_UART_send+2
   846  0186  0852               	movf	??_UART_send+1,w
   847  0187  00C9               	movwf	memcpy@n
   848  0188  0853               	movf	??_UART_send+2,w
   849  0189  00CA               	movwf	memcpy@n+1
   850  018A  3036               	movlw	(low (_tx_data| 0))& (0+255)
   851  018B  118A  2105  118A   	fcall	_memcpy
   852                           
   853                           ;SYS_uart.c: 41: if(tx_data[17] < 0xFF)
   854  018E  1283               	bcf	3,5	;RP0=0, select bank0
   855  018F  1303               	bcf	3,6	;RP1=0, select bank0
   856  0190  0A47               	incf	_tx_data+17,w
   857  0191  1903               	btfsc	3,2
   858  0192  2995               	goto	l1053
   859                           
   860                           ;SYS_uart.c: 42: TXREG = tx_data[17];
   861  0193  0847               	movf	_tx_data+17,w
   862  0194  2996               	goto	L1
   863  0195                     l1053:	
   864                           
   865                           ;SYS_uart.c: 43: else
   866                           ;SYS_uart.c: 44: TXREG = 0xFE;
   867  0195  30FE               	movlw	254
   868  0196                     L1:	
   869  0196  0095               	movwf	21	;volatile
   870                           
   871                           ;SYS_uart.c: 45: tx_running = 1;
   872  0197  01F3               	clrf	_tx_running
   873  0198  0AF3               	incf	_tx_running,f
   874  0199  0008               	return
   875  019A                     __end_of_UART_send:	
   876                           
   877                           	psect	text4
   878  0105                     __ptext4:	
   879 ;; *************** function _memcpy *****************
   880 ;; Defined at:
   881 ;;		line 27 in file "D:\XC8\sources\common\memcpy.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;  d1              1    wreg     PTR void 
   884 ;;		 -> tx_data(18), 
   885 ;;  s1              1    0[BANK0 ] PTR const void 
   886 ;;		 -> anData(18), 
   887 ;;  n               2    1[BANK0 ] unsigned int 
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  d1              1    7[BANK0 ] PTR void 
   890 ;;		 -> tx_data(18), 
   891 ;;  s               1    6[BANK0 ] PTR const unsigned char 
   892 ;;		 -> anData(18), 
   893 ;;  d               1    5[BANK0 ] PTR unsigned char 
   894 ;;		 -> tx_data(18), 
   895 ;;  tmp             1    4[BANK0 ] unsigned char 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      PTR void 
   898 ;; Registers used:
   899 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   905 ;;      Params:         0       3       0       0
   906 ;;      Locals:         0       4       0       0
   907 ;;      Temps:          0       1       0       0
   908 ;;      Totals:         0       8       0       0
   909 ;;Total ram usage:        8 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; Hardware stack levels required when called:    1
   912 ;; This function calls:
   913 ;;		Nothing
   914 ;; This function is called by:
   915 ;;		_UART_send
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           
   920                           ;psect for function _memcpy
   921  0105                     _memcpy:	
   922                           
   923                           ;incstack = 0
   924                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
   925                           ;memcpy@d1 stored from wreg
   926  0105  1283               	bcf	3,5	;RP0=0, select bank0
   927  0106  1303               	bcf	3,6	;RP1=0, select bank0
   928  0107  00CF               	movwf	memcpy@d1
   929  0108  0848               	movf	memcpy@s1,w
   930  0109  00CB               	movwf	??_memcpy
   931  010A  084B               	movf	??_memcpy,w
   932  010B  00CE               	movwf	memcpy@s
   933  010C  084F               	movf	memcpy@d1,w
   934  010D  00CB               	movwf	??_memcpy
   935  010E  084B               	movf	??_memcpy,w
   936  010F  00CD               	movwf	memcpy@d
   937  0110                     l616:	
   938  0110  3001               	movlw	1
   939  0111  02C9               	subwf	memcpy@n,f
   940  0112  3000               	movlw	0
   941  0113  1C03               	skipc
   942  0114  03CA               	decf	memcpy@n+1,f
   943  0115  02CA               	subwf	memcpy@n+1,f
   944  0116  0A49               	incf	memcpy@n,w
   945  0117  1903               	btfsc	3,2
   946  0118  0A4A               	incf	memcpy@n+1,w
   947  0119  1903               	btfsc	3,2
   948  011A  0008               	return
   949  011B  084E               	movf	memcpy@s,w
   950  011C  0084               	movwf	4
   951  011D  1383               	bcf	3,7	;select IRP bank0
   952  011E  0800               	movf	0,w
   953  011F  00CB               	movwf	??_memcpy
   954  0120  084B               	movf	??_memcpy,w
   955  0121  00CC               	movwf	memcpy@tmp
   956  0122  3001               	movlw	1
   957  0123  00CB               	movwf	??_memcpy
   958  0124  084B               	movf	??_memcpy,w
   959  0125  07CE               	addwf	memcpy@s,f
   960  0126  084C               	movf	memcpy@tmp,w
   961  0127  00CB               	movwf	??_memcpy
   962  0128  084D               	movf	memcpy@d,w
   963  0129  0084               	movwf	4
   964  012A  084B               	movf	??_memcpy,w
   965  012B  0080               	movwf	0
   966  012C  3001               	movlw	1
   967  012D  00CB               	movwf	??_memcpy
   968  012E  084B               	movf	??_memcpy,w
   969  012F  07CD               	addwf	memcpy@d,f
   970  0130  2910               	goto	l616
   971  0131                     __end_of_memcpy:	
   972                           ;	Return value of _memcpy is never used
   973                           
   974                           
   975                           	psect	text5
   976  0021                     __ptext5:	
   977 ;; *************** function _SUP_ADC_management *****************
   978 ;; Defined at:
   979 ;;		line 69 in file "sources/SUP_func.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;		None
   982 ;; Auto vars:     Size  Location     Type
   983 ;;		None
   984 ;; Return value:  Size  Location     Type
   985 ;;                  1    wreg      void 
   986 ;; Registers used:
   987 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   988 ;; Tracked objects:
   989 ;;		On entry : 0/0
   990 ;;		On exit  : 0/0
   991 ;;		Unchanged: 0/0
   992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   993 ;;      Params:         0       0       0       0
   994 ;;      Locals:         0       0       0       0
   995 ;;      Temps:          0       1       0       0
   996 ;;      Totals:         0       1       0       0
   997 ;;Total ram usage:        1 bytes
   998 ;; Hardware stack levels used:    1
   999 ;; Hardware stack levels required when called:    2
  1000 ;; This function calls:
  1001 ;;		_ADC_chan_change
  1002 ;;		_ADC_get_value
  1003 ;;		_ADC_start_conv
  1004 ;; This function is called by:
  1005 ;;		_SUP_Oper
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           
  1010                           ;psect for function _SUP_ADC_management
  1011  0021                     _SUP_ADC_management:	
  1012                           
  1013                           ;SUP_func.c: 71: static uint8 sequence = 0;
  1014                           ;SUP_func.c: 73: if(!emission_rdy)
  1015                           
  1016                           ;incstack = 0
  1017                           ; Regs used in _SUP_ADC_management: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1018  0021  0872               	movf	_emission_rdy,w
  1019  0022  1D03               	btfss	3,2
  1020  0023  0008               	return
  1021  0024  28A9               	goto	l1147
  1022  0025                     l1095:	
  1023                           ;SUP_func.c: 76: {
  1024                           ;SUP_func.c: 77: case 0:
  1025                           
  1026                           ;SUP_func.c: 74: {
  1027                           ;SUP_func.c: 75: switch(sequence)
  1028                           
  1029                           
  1030                           ;SUP_func.c: 78: ADC_start_conv();
  1031  0025  118A  2226         	fcall	_ADC_start_conv
  1032                           
  1033                           ;SUP_func.c: 79: sequence++;
  1034  0027  3001               	movlw	1
  1035  0028  1283               	bcf	3,5	;RP0=0, select bank0
  1036  0029  1303               	bcf	3,6	;RP1=0, select bank0
  1037  002A  00CE               	movwf	??_SUP_ADC_management
  1038  002B  084E               	movf	??_SUP_ADC_management,w
  1039  002C  07F1               	addwf	SUP_ADC_management@sequence,f
  1040                           
  1041                           ;SUP_func.c: 80: break;
  1042  002D  0008               	return
  1043  002E                     l1099:	
  1044                           ;SUP_func.c: 82: case 1:
  1045                           
  1046                           
  1047                           ;SUP_func.c: 83: if(endConv)
  1048  002E  0874               	movf	_endConv,w	;volatile
  1049  002F  1903               	btfsc	3,2
  1050  0030  0008               	return
  1051                           
  1052                           ;SUP_func.c: 84: {
  1053                           ;SUP_func.c: 85: endConv = 0;
  1054  0031  01F4               	clrf	_endConv	;volatile
  1055                           
  1056                           ;SUP_func.c: 86: anData[0].time = compteur;
  1057  0032  1283               	bcf	3,5	;RP0=0, select bank0
  1058  0033  1303               	bcf	3,6	;RP1=0, select bank0
  1059  0034  0823               	movf	_compteur+3,w	;volatile
  1060  0035  00A9               	movwf	_anData+5
  1061  0036  0822               	movf	_compteur+2,w	;volatile
  1062  0037  00A8               	movwf	_anData+4
  1063  0038  0821               	movf	_compteur+1,w	;volatile
  1064  0039  00A7               	movwf	_anData+3
  1065  003A  0820               	movf	_compteur,w	;volatile
  1066  003B  00A6               	movwf	_anData+2
  1067                           
  1068                           ;SUP_func.c: 87: anData[0].data = ADC_get_value();
  1069  003C  118A  215C  118A   	fcall	_ADC_get_value
  1070  003F  1283               	bcf	3,5	;RP0=0, select bank0
  1071  0040  1303               	bcf	3,6	;RP1=0, select bank0
  1072  0041  0849               	movf	?_ADC_get_value+1,w
  1073  0042  00A5               	movwf	_anData+1
  1074  0043  0848               	movf	?_ADC_get_value,w
  1075  0044  00A4               	movwf	_anData
  1076                           
  1077                           ;SUP_func.c: 88: ADC_chan_change(0b101);
  1078  0045  3005               	movlw	5
  1079  0046  118A  21EE         	fcall	_ADC_chan_change
  1080                           
  1081                           ;SUP_func.c: 89: sequence++;
  1082  0048  3001               	movlw	1
  1083  0049  1283               	bcf	3,5	;RP0=0, select bank0
  1084  004A  1303               	bcf	3,6	;RP1=0, select bank0
  1085  004B  00CE               	movwf	??_SUP_ADC_management
  1086  004C  084E               	movf	??_SUP_ADC_management,w
  1087  004D  07F1               	addwf	SUP_ADC_management@sequence,f
  1088                           
  1089                           ;SUP_func.c: 90: }
  1090                           ;SUP_func.c: 91: break;
  1091  004E  0008               	return
  1092  004F                     l1111:	
  1093                           ;SUP_func.c: 93: case 2:
  1094                           
  1095                           
  1096                           ;SUP_func.c: 94: ADC_start_conv();
  1097  004F  118A  2226         	fcall	_ADC_start_conv
  1098                           
  1099                           ;SUP_func.c: 95: sequence++;
  1100  0051  3001               	movlw	1
  1101  0052  1283               	bcf	3,5	;RP0=0, select bank0
  1102  0053  1303               	bcf	3,6	;RP1=0, select bank0
  1103  0054  00CE               	movwf	??_SUP_ADC_management
  1104  0055  084E               	movf	??_SUP_ADC_management,w
  1105  0056  07F1               	addwf	SUP_ADC_management@sequence,f
  1106                           
  1107                           ;SUP_func.c: 96: break;
  1108  0057  0008               	return
  1109  0058                     l1115:	
  1110                           ;SUP_func.c: 98: case 3:
  1111                           
  1112                           
  1113                           ;SUP_func.c: 99: if(endConv)
  1114  0058  0874               	movf	_endConv,w	;volatile
  1115  0059  1903               	btfsc	3,2
  1116  005A  0008               	return
  1117                           
  1118                           ;SUP_func.c: 100: {
  1119                           ;SUP_func.c: 101: endConv = 0;
  1120  005B  01F4               	clrf	_endConv	;volatile
  1121                           
  1122                           ;SUP_func.c: 102: anData[1].time = compteur;
  1123  005C  1283               	bcf	3,5	;RP0=0, select bank0
  1124  005D  1303               	bcf	3,6	;RP1=0, select bank0
  1125  005E  0823               	movf	_compteur+3,w	;volatile
  1126  005F  00AF               	movwf	_anData+11
  1127  0060  0822               	movf	_compteur+2,w	;volatile
  1128  0061  00AE               	movwf	_anData+10
  1129  0062  0821               	movf	_compteur+1,w	;volatile
  1130  0063  00AD               	movwf	_anData+9
  1131  0064  0820               	movf	_compteur,w	;volatile
  1132  0065  00AC               	movwf	_anData+8
  1133                           
  1134                           ;SUP_func.c: 103: anData[1].data = ADC_get_value();
  1135  0066  118A  215C  118A   	fcall	_ADC_get_value
  1136  0069  1283               	bcf	3,5	;RP0=0, select bank0
  1137  006A  1303               	bcf	3,6	;RP1=0, select bank0
  1138  006B  0849               	movf	?_ADC_get_value+1,w
  1139  006C  00AB               	movwf	_anData+7
  1140  006D  0848               	movf	?_ADC_get_value,w
  1141  006E  00AA               	movwf	_anData+6
  1142                           
  1143                           ;SUP_func.c: 104: ADC_chan_change(0b110);
  1144  006F  3006               	movlw	6
  1145  0070  118A  21EE         	fcall	_ADC_chan_change
  1146                           
  1147                           ;SUP_func.c: 105: sequence++;
  1148  0072  3001               	movlw	1
  1149  0073  1283               	bcf	3,5	;RP0=0, select bank0
  1150  0074  1303               	bcf	3,6	;RP1=0, select bank0
  1151  0075  00CE               	movwf	??_SUP_ADC_management
  1152  0076  084E               	movf	??_SUP_ADC_management,w
  1153  0077  07F1               	addwf	SUP_ADC_management@sequence,f
  1154                           
  1155                           ;SUP_func.c: 106: }
  1156                           ;SUP_func.c: 107: break;
  1157  0078  0008               	return
  1158  0079                     l1127:	
  1159                           ;SUP_func.c: 109: case 4:
  1160                           
  1161                           
  1162                           ;SUP_func.c: 110: ADC_start_conv();
  1163  0079  118A  2226         	fcall	_ADC_start_conv
  1164                           
  1165                           ;SUP_func.c: 111: sequence++;
  1166  007B  3001               	movlw	1
  1167  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1168  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1169  007E  00CE               	movwf	??_SUP_ADC_management
  1170  007F  084E               	movf	??_SUP_ADC_management,w
  1171  0080  07F1               	addwf	SUP_ADC_management@sequence,f
  1172                           
  1173                           ;SUP_func.c: 112: break;
  1174  0081  0008               	return
  1175  0082                     l1131:	
  1176                           ;SUP_func.c: 114: case 5:
  1177                           
  1178                           
  1179                           ;SUP_func.c: 115: if(endConv)
  1180  0082  0874               	movf	_endConv,w	;volatile
  1181  0083  1903               	btfsc	3,2
  1182  0084  0008               	return
  1183                           
  1184                           ;SUP_func.c: 116: {
  1185                           ;SUP_func.c: 117: endConv = 0;
  1186  0085  01F4               	clrf	_endConv	;volatile
  1187                           
  1188                           ;SUP_func.c: 118: anData[2].time = compteur;
  1189  0086  1283               	bcf	3,5	;RP0=0, select bank0
  1190  0087  1303               	bcf	3,6	;RP1=0, select bank0
  1191  0088  0823               	movf	_compteur+3,w	;volatile
  1192  0089  00B5               	movwf	_anData+17
  1193  008A  0822               	movf	_compteur+2,w	;volatile
  1194  008B  00B4               	movwf	_anData+16
  1195  008C  0821               	movf	_compteur+1,w	;volatile
  1196  008D  00B3               	movwf	_anData+15
  1197  008E  0820               	movf	_compteur,w	;volatile
  1198  008F  00B2               	movwf	_anData+14
  1199                           
  1200                           ;SUP_func.c: 119: anData[2].data = ADC_get_value();
  1201  0090  118A  215C  118A   	fcall	_ADC_get_value
  1202  0093  1283               	bcf	3,5	;RP0=0, select bank0
  1203  0094  1303               	bcf	3,6	;RP1=0, select bank0
  1204  0095  0849               	movf	?_ADC_get_value+1,w
  1205  0096  00B1               	movwf	_anData+13
  1206  0097  0848               	movf	?_ADC_get_value,w
  1207  0098  00B0               	movwf	_anData+12
  1208                           
  1209                           ;SUP_func.c: 120: ADC_chan_change(0b100);
  1210  0099  3004               	movlw	4
  1211  009A  118A  21EE         	fcall	_ADC_chan_change
  1212                           
  1213                           ;SUP_func.c: 121: sequence++;
  1214  009C  3001               	movlw	1
  1215  009D  1283               	bcf	3,5	;RP0=0, select bank0
  1216  009E  1303               	bcf	3,6	;RP1=0, select bank0
  1217  009F  00CE               	movwf	??_SUP_ADC_management
  1218  00A0  084E               	movf	??_SUP_ADC_management,w
  1219  00A1  07F1               	addwf	SUP_ADC_management@sequence,f
  1220                           
  1221                           ;SUP_func.c: 122: }
  1222                           ;SUP_func.c: 123: break;
  1223  00A2  0008               	return
  1224  00A3                     l80:	
  1225                           ;SUP_func.c: 125: case 6:
  1226                           
  1227                           
  1228                           ;SUP_func.c: 126: emission_rdy = 1;
  1229  00A3  01F2               	clrf	_emission_rdy
  1230  00A4  0AF2               	incf	_emission_rdy,f
  1231                           
  1232                           ;SUP_func.c: 127: sequence = 0;
  1233  00A5  01F1               	clrf	SUP_ADC_management@sequence
  1234                           
  1235                           ;SUP_func.c: 128: break;
  1236  00A6  0008               	return
  1237  00A7                     l1145:	
  1238                           ;SUP_func.c: 130: default:
  1239                           
  1240                           
  1241                           ;SUP_func.c: 131: sequence = 0;
  1242  00A7  01F1               	clrf	SUP_ADC_management@sequence
  1243                           
  1244                           ;SUP_func.c: 132: }
  1245  00A8  0008               	return
  1246  00A9                     l1147:	
  1247  00A9  0871               	movf	SUP_ADC_management@sequence,w
  1248                           
  1249                           ; Switch size 1, requested type "space"
  1250                           ; Number of cases is 7, Range of values is 0 to 6
  1251                           ; switch strategies available:
  1252                           ; Name         Instructions Cycles
  1253                           ; direct_byte           21     7 (fixed)
  1254                           ; simple_byte           22    12 (average)
  1255                           ; jumptable            260     6 (fixed)
  1256                           ;	Chosen strategy is direct_byte
  1257  00AA  0084               	movwf	4
  1258  00AB  3007               	movlw	7
  1259  00AC  0204               	subwf	4,w
  1260  00AD  1803               	skipnc
  1261  00AE  28A7               	goto	l1145
  1262  00AF  3001               	movlw	high S1209
  1263  00B0  008A               	movwf	10
  1264  00B1  1003               	clrc
  1265  00B2  0D04               	rlf	4,w
  1266  00B3  3ED2               	addlw	low S1209
  1267  00B4  0082               	movwf	2
  1268  00B5  0008               	return
  1269  00B6                     __end_of_SUP_ADC_management:	
  1270                           
  1271                           	psect	swtext1
  1272  01D2                     __pswtext1:	
  1273  01D2                     S1209:	
  1274  01D2  118A  2825         	ljmp	l1095
  1275  01D4  118A  282E         	ljmp	l1099
  1276  01D6  118A  284F         	ljmp	l1111
  1277  01D8  118A  2858         	ljmp	l1115
  1278  01DA  118A  2879         	ljmp	l1127
  1279  01DC  118A  2882         	ljmp	l1131
  1280  01DE  118A  28A3         	ljmp	l80
  1281                           
  1282                           	psect	text6
  1283  0226                     __ptext6:	
  1284 ;; *************** function _ADC_start_conv *****************
  1285 ;; Defined at:
  1286 ;;		line 36 in file "sources/SYS_adc.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;		None
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;                  1    wreg      void 
  1293 ;; Registers used:
  1294 ;;		None
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1300 ;;      Params:         0       0       0       0
  1301 ;;      Locals:         0       0       0       0
  1302 ;;      Temps:          0       0       0       0
  1303 ;;      Totals:         0       0       0       0
  1304 ;;Total ram usage:        0 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    1
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_SUP_ADC_management
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function _ADC_start_conv
  1316  0226                     _ADC_start_conv:	
  1317                           
  1318                           ;SYS_adc.c: 38: PIR1bits.ADIF = 0;
  1319                           
  1320                           ;incstack = 0
  1321                           ; Regs used in _ADC_start_conv: []
  1322  0226  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0227  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0228  130C               	bcf	12,6	;volatile
  1325                           
  1326                           ;SYS_adc.c: 39: ADCON0bits.GO = 1;
  1327  0229  149F               	bsf	31,1	;volatile
  1328  022A  0008               	return
  1329  022B                     __end_of_ADC_start_conv:	
  1330                           
  1331                           	psect	text7
  1332  015C                     __ptext7:	
  1333 ;; *************** function _ADC_get_value *****************
  1334 ;; Defined at:
  1335 ;;		line 42 in file "sources/SYS_adc.c"
  1336 ;; Parameters:    Size  Location     Type
  1337 ;;		None
  1338 ;; Auto vars:     Size  Location     Type
  1339 ;;  ANvalue         2    4[BANK0 ] unsigned int 
  1340 ;; Return value:  Size  Location     Type
  1341 ;;                  2    0[BANK0 ] unsigned int 
  1342 ;; Registers used:
  1343 ;;		wreg, status,2, btemp+1
  1344 ;; Tracked objects:
  1345 ;;		On entry : 0/0
  1346 ;;		On exit  : 0/0
  1347 ;;		Unchanged: 0/0
  1348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1349 ;;      Params:         0       2       0       0
  1350 ;;      Locals:         0       2       0       0
  1351 ;;      Temps:          0       2       0       0
  1352 ;;      Totals:         0       6       0       0
  1353 ;;Total ram usage:        6 bytes
  1354 ;; Hardware stack levels used:    1
  1355 ;; Hardware stack levels required when called:    1
  1356 ;; This function calls:
  1357 ;;		Nothing
  1358 ;; This function is called by:
  1359 ;;		_SUP_ADC_management
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           
  1364                           ;psect for function _ADC_get_value
  1365  015C                     _ADC_get_value:	
  1366                           
  1367                           ;SYS_adc.c: 44: uint16 ANvalue = 0;
  1368                           
  1369                           ;incstack = 0
  1370                           ; Regs used in _ADC_get_value: [wreg+status,2+btemp+1]
  1371  015C  1283               	bcf	3,5	;RP0=0, select bank0
  1372  015D  1303               	bcf	3,6	;RP1=0, select bank0
  1373  015E  01CC               	clrf	ADC_get_value@ANvalue
  1374  015F  01CD               	clrf	ADC_get_value@ANvalue+1
  1375                           
  1376                           ;SYS_adc.c: 46: ANvalue = ADRESL;
  1377  0160  1683               	bsf	3,5	;RP0=1, select bank1
  1378  0161  1303               	bcf	3,6	;RP1=0, select bank1
  1379  0162  081E               	movf	30,w	;volatile
  1380  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1381  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1382  0165  00CA               	movwf	??_ADC_get_value
  1383  0166  01CB               	clrf	??_ADC_get_value+1
  1384  0167  084A               	movf	??_ADC_get_value,w
  1385  0168  00CC               	movwf	ADC_get_value@ANvalue
  1386  0169  084B               	movf	??_ADC_get_value+1,w
  1387  016A  00CD               	movwf	ADC_get_value@ANvalue+1
  1388                           
  1389                           ;SYS_adc.c: 47: ANvalue += (ADRESH << 8);
  1390  016B  081E               	movf	30,w	;volatile
  1391  016C  00CA               	movwf	??_ADC_get_value
  1392  016D  01CB               	clrf	??_ADC_get_value+1
  1393  016E  084A               	movf	??_ADC_get_value,w
  1394  016F  00CB               	movwf	??_ADC_get_value+1
  1395  0170  01CA               	clrf	??_ADC_get_value
  1396  0171  084A               	movf	??_ADC_get_value,w
  1397  0172  07CC               	addwf	ADC_get_value@ANvalue,f
  1398  0173  1803               	skipnc
  1399  0174  0ACD               	incf	ADC_get_value@ANvalue+1,f
  1400  0175  084B               	movf	??_ADC_get_value+1,w
  1401  0176  07CD               	addwf	ADC_get_value@ANvalue+1,f
  1402                           
  1403                           ;SYS_adc.c: 49: return ANvalue;
  1404  0177  084D               	movf	ADC_get_value@ANvalue+1,w
  1405  0178  00C9               	movwf	?_ADC_get_value+1
  1406  0179  084C               	movf	ADC_get_value@ANvalue,w
  1407  017A  00C8               	movwf	?_ADC_get_value
  1408  017B  0008               	return
  1409  017C                     __end_of_ADC_get_value:	
  1410                           
  1411                           	psect	text8
  1412  01EE                     __ptext8:	
  1413 ;; *************** function _ADC_chan_change *****************
  1414 ;; Defined at:
  1415 ;;		line 31 in file "sources/SYS_adc.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  ANChannel       1    wreg     unsigned char 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  ANChannel       1    1[BANK0 ] unsigned char 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      void 
  1422 ;; Registers used:
  1423 ;;		wreg, status,2, status,0
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1429 ;;      Params:         0       0       0       0
  1430 ;;      Locals:         0       1       0       0
  1431 ;;      Temps:          0       1       0       0
  1432 ;;      Totals:         0       2       0       0
  1433 ;;Total ram usage:        2 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    1
  1436 ;; This function calls:
  1437 ;;		Nothing
  1438 ;; This function is called by:
  1439 ;;		_SUP_ADC_management
  1440 ;; This function uses a non-reentrant model
  1441 ;;
  1442                           
  1443                           
  1444                           ;psect for function _ADC_chan_change
  1445  01EE                     _ADC_chan_change:	
  1446                           
  1447                           ;incstack = 0
  1448                           ; Regs used in _ADC_chan_change: [wreg+status,2+status,0]
  1449                           ;ADC_chan_change@ANChannel stored from wreg
  1450  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1451  01EF  1303               	bcf	3,6	;RP1=0, select bank0
  1452  01F0  00C9               	movwf	ADC_chan_change@ANChannel
  1453                           
  1454                           ;SYS_adc.c: 33: ADCON0bits.CHS = ANChannel;
  1455  01F1  0849               	movf	ADC_chan_change@ANChannel,w
  1456  01F2  00C8               	movwf	??_ADC_chan_change
  1457  01F3  0DC8               	rlf	??_ADC_chan_change,f
  1458  01F4  0DC8               	rlf	??_ADC_chan_change,f
  1459  01F5  081F               	movf	31,w	;volatile
  1460  01F6  0648               	xorwf	??_ADC_chan_change,w
  1461  01F7  39E3               	andlw	-29
  1462  01F8  0648               	xorwf	??_ADC_chan_change,w
  1463  01F9  009F               	movwf	31	;volatile
  1464  01FA  0008               	return
  1465  01FB                     __end_of_ADC_chan_change:	
  1466                           
  1467                           	psect	text9
  1468  019A                     __ptext9:	
  1469 ;; *************** function _SUP_Init *****************
  1470 ;; Defined at:
  1471 ;;		line 36 in file "sources/SUP_func.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, status,2, status,0, pclath, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1485 ;;      Params:         0       0       0       0
  1486 ;;      Locals:         0       0       0       0
  1487 ;;      Temps:          0       0       0       0
  1488 ;;      Totals:         0       0       0       0
  1489 ;;Total ram usage:        0 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    2
  1492 ;; This function calls:
  1493 ;;		_init_adc
  1494 ;;		_init_io
  1495 ;;		_init_osc
  1496 ;;		_init_tmr0
  1497 ;;		_init_uart
  1498 ;; This function is called by:
  1499 ;;		_main
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           
  1504                           ;psect for function _SUP_Init
  1505  019A                     _SUP_Init:	
  1506                           
  1507                           ;SUP_func.c: 38: init_osc ();
  1508                           
  1509                           ;incstack = 0
  1510                           ; Regs used in _SUP_Init: [wreg+status,2+status,0+pclath+cstack]
  1511  019A  118A  2220  118A   	fcall	_init_osc
  1512                           
  1513                           ;SUP_func.c: 40: init_tmr0 ();
  1514  019D  118A  2207  118A   	fcall	_init_tmr0
  1515                           
  1516                           ;SUP_func.c: 42: init_io ();
  1517  01A0  118A  21FB  118A   	fcall	_init_io
  1518                           
  1519                           ;SUP_func.c: 44: init_uart ();
  1520  01A3  118A  21E0  118A   	fcall	_init_uart
  1521                           
  1522                           ;SUP_func.c: 46: init_adc ();
  1523  01A6  118A  21AF         	fcall	_init_adc
  1524                           
  1525                           ;SUP_func.c: 48: INTCONbits.GIE = 1;
  1526  01A8  178B               	bsf	11,7	;volatile
  1527                           
  1528                           ;SUP_func.c: 49: INTCONbits.PEIE = 1;
  1529  01A9  170B               	bsf	11,6	;volatile
  1530                           
  1531                           ;SUP_func.c: 51: TMR0 = 0xE6;;
  1532  01AA  30E6               	movlw	230
  1533  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1534  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1535  01AD  0081               	movwf	1	;volatile
  1536  01AE  0008               	return
  1537  01AF                     __end_of_SUP_Init:	
  1538                           
  1539                           	psect	text10
  1540  01E0                     __ptext10:	
  1541 ;; *************** function _init_uart *****************
  1542 ;; Defined at:
  1543 ;;		line 19 in file "sources/SYS_uart.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  1    wreg      void 
  1550 ;; Registers used:
  1551 ;;		wreg
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1557 ;;      Params:         0       0       0       0
  1558 ;;      Locals:         0       0       0       0
  1559 ;;      Temps:          0       0       0       0
  1560 ;;      Totals:         0       0       0       0
  1561 ;;Total ram usage:        0 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    1
  1564 ;; This function calls:
  1565 ;;		Nothing
  1566 ;; This function is called by:
  1567 ;;		_SUP_Init
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           
  1572                           ;psect for function _init_uart
  1573  01E0                     _init_uart:	
  1574                           
  1575                           ;SYS_uart.c: 29: RCSTAbits.SPEN = 1;
  1576                           
  1577                           ;incstack = 0
  1578                           ; Regs used in _init_uart: [wreg]
  1579  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1580  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  1581  01E2  1797               	bsf	23,7	;volatile
  1582                           
  1583                           ;SYS_uart.c: 30: SPBRG = 0x10;
  1584  01E3  3010               	movlw	16
  1585  01E4  0093               	movwf	19	;volatile
  1586                           
  1587                           ;SYS_uart.c: 31: BAUDCTLbits.BRG16 = 1;
  1588  01E5  1591               	bsf	17,3	;volatile
  1589                           
  1590                           ;SYS_uart.c: 32: TXSTAbits.BRGH = 1;
  1591  01E6  1516               	bsf	22,2	;volatile
  1592                           
  1593                           ;SYS_uart.c: 34: PIE1bits.T1IE = 1;
  1594  01E7  1683               	bsf	3,5	;RP0=1, select bank1
  1595  01E8  1303               	bcf	3,6	;RP1=0, select bank1
  1596  01E9  140C               	bsf	12,0	;volatile
  1597                           
  1598                           ;SYS_uart.c: 35: TXSTAbits.TXEN = 1;
  1599  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  1600  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  1601  01EC  1696               	bsf	22,5	;volatile
  1602  01ED  0008               	return
  1603  01EE                     __end_of_init_uart:	
  1604                           
  1605                           	psect	text11
  1606  0207                     __ptext11:	
  1607 ;; *************** function _init_tmr0 *****************
  1608 ;; Defined at:
  1609 ;;		line 16 in file "sources/SYS_trm0.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		None
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1623 ;;      Params:         0       0       0       0
  1624 ;;      Locals:         0       0       0       0
  1625 ;;      Temps:          0       0       0       0
  1626 ;;      Totals:         0       0       0       0
  1627 ;;Total ram usage:        0 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    1
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		_SUP_Init
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           
  1638                           ;psect for function _init_tmr0
  1639  0207                     _init_tmr0:	
  1640                           
  1641                           ;SYS_trm0.c: 18: OPTION_REGbits.T0CS = 0;
  1642                           
  1643                           ;incstack = 0
  1644                           ; Regs used in _init_tmr0: []
  1645  0207  1683               	bsf	3,5	;RP0=1, select bank1
  1646  0208  1303               	bcf	3,6	;RP1=0, select bank1
  1647  0209  1281               	bcf	1,5	;volatile
  1648                           
  1649                           ;SYS_trm0.c: 19: OPTION_REGbits.PSA = 0;
  1650  020A  1181               	bcf	1,3	;volatile
  1651                           
  1652                           ;SYS_trm0.c: 20: OPTION_REGbits.PS2 = 0;
  1653  020B  1101               	bcf	1,2	;volatile
  1654                           
  1655                           ;SYS_trm0.c: 21: OPTION_REGbits.PS1 = 1;
  1656  020C  1481               	bsf	1,1	;volatile
  1657                           
  1658                           ;SYS_trm0.c: 22: OPTION_REGbits.PS0 = 0;
  1659  020D  1001               	bcf	1,0	;volatile
  1660                           
  1661                           ;SYS_trm0.c: 24: INTCONbits.T0IE = 1;
  1662  020E  168B               	bsf	11,5	;volatile
  1663                           
  1664                           ;SYS_trm0.c: 25: INTCONbits.T0IF = 0;
  1665  020F  110B               	bcf	11,2	;volatile
  1666  0210  0008               	return
  1667  0211                     __end_of_init_tmr0:	
  1668                           
  1669                           	psect	text12
  1670  0220                     __ptext12:	
  1671 ;; *************** function _init_osc *****************
  1672 ;; Defined at:
  1673 ;;		line 16 in file "sources/SYS_osc.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      void 
  1680 ;; Registers used:
  1681 ;;		None
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1687 ;;      Params:         0       0       0       0
  1688 ;;      Locals:         0       0       0       0
  1689 ;;      Temps:          0       0       0       0
  1690 ;;      Totals:         0       0       0       0
  1691 ;;Total ram usage:        0 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    1
  1694 ;; This function calls:
  1695 ;;		Nothing
  1696 ;; This function is called by:
  1697 ;;		_SUP_Init
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           
  1702                           ;psect for function _init_osc
  1703  0220                     _init_osc:	
  1704                           
  1705                           ;SYS_osc.c: 18: OSCCONbits.IRCF2 = 1;
  1706                           
  1707                           ;incstack = 0
  1708                           ; Regs used in _init_osc: []
  1709  0220  1683               	bsf	3,5	;RP0=1, select bank1
  1710  0221  1303               	bcf	3,6	;RP1=0, select bank1
  1711  0222  170F               	bsf	15,6	;volatile
  1712                           
  1713                           ;SYS_osc.c: 19: OSCCONbits.IRCF1 = 1;
  1714  0223  168F               	bsf	15,5	;volatile
  1715                           
  1716                           ;SYS_osc.c: 20: OSCCONbits.IRCF0 = 1;
  1717  0224  160F               	bsf	15,4	;volatile
  1718  0225  0008               	return
  1719  0226                     __end_of_init_osc:	
  1720                           
  1721                           	psect	text13
  1722  01FB                     __ptext13:	
  1723 ;; *************** function _init_io *****************
  1724 ;; Defined at:
  1725 ;;		line 16 in file "sources/SYS_io.c"
  1726 ;; Parameters:    Size  Location     Type
  1727 ;;		None
  1728 ;; Auto vars:     Size  Location     Type
  1729 ;;		None
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  1    wreg      void 
  1732 ;; Registers used:
  1733 ;;		None
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1739 ;;      Params:         0       0       0       0
  1740 ;;      Locals:         0       0       0       0
  1741 ;;      Temps:          0       0       0       0
  1742 ;;      Totals:         0       0       0       0
  1743 ;;Total ram usage:        0 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    1
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_SUP_Init
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _init_io
  1755  01FB                     _init_io:	
  1756                           
  1757                           ;SYS_io.c: 18: TRISCbits.TRISC0 = 1;
  1758                           
  1759                           ;incstack = 0
  1760                           ; Regs used in _init_io: []
  1761  01FB  1683               	bsf	3,5	;RP0=1, select bank1
  1762  01FC  1303               	bcf	3,6	;RP1=0, select bank1
  1763  01FD  1407               	bsf	7,0	;volatile
  1764                           
  1765                           ;SYS_io.c: 19: TRISCbits.TRISC1 = 1;
  1766  01FE  1487               	bsf	7,1	;volatile
  1767                           
  1768                           ;SYS_io.c: 20: TRISCbits.TRISC2 = 1;
  1769  01FF  1507               	bsf	7,2	;volatile
  1770                           
  1771                           ;SYS_io.c: 21: TRISCbits.TRISC4 = 1;
  1772  0200  1607               	bsf	7,4	;volatile
  1773                           
  1774                           ;SYS_io.c: 22: TRISCbits.TRISC5 = 1;
  1775  0201  1687               	bsf	7,5	;volatile
  1776                           
  1777                           ;SYS_io.c: 23: TRISAbits.TRISA5 = 0;
  1778  0202  1285               	bcf	5,5	;volatile
  1779                           
  1780                           ;SYS_io.c: 24: PORTAbits.RA5 = 1;
  1781  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1782  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1783  0205  1685               	bsf	5,5	;volatile
  1784  0206  0008               	return
  1785  0207                     __end_of_init_io:	
  1786                           
  1787                           	psect	text14
  1788  01AF                     __ptext14:	
  1789 ;; *************** function _init_adc *****************
  1790 ;; Defined at:
  1791 ;;		line 18 in file "sources/SYS_adc.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;		None
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, status,2, status,0
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1805 ;;      Params:         0       0       0       0
  1806 ;;      Locals:         0       0       0       0
  1807 ;;      Temps:          0       0       0       0
  1808 ;;      Totals:         0       0       0       0
  1809 ;;Total ram usage:        0 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    1
  1812 ;; This function calls:
  1813 ;;		Nothing
  1814 ;; This function is called by:
  1815 ;;		_SUP_Init
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818                           
  1819                           
  1820                           ;psect for function _init_adc
  1821  01AF                     _init_adc:	
  1822                           
  1823                           ;SYS_adc.c: 20: ADCON0bits.ADFM = 1;
  1824                           
  1825                           ;incstack = 0
  1826                           ; Regs used in _init_adc: [wreg+status,2+status,0]
  1827  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1828  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1829  01B1  179F               	bsf	31,7	;volatile
  1830                           
  1831                           ;SYS_adc.c: 21: ADCON0bits.CHS = 0b100;
  1832  01B2  081F               	movf	31,w	;volatile
  1833  01B3  39E3               	andlw	-29
  1834  01B4  3810               	iorlw	16
  1835  01B5  009F               	movwf	31	;volatile
  1836                           
  1837                           ;SYS_adc.c: 22: ADCON0bits.ADON = 1;
  1838  01B6  141F               	bsf	31,0	;volatile
  1839                           
  1840                           ;SYS_adc.c: 23: ADCON1bits.ADCS2 = 1;
  1841  01B7  1683               	bsf	3,5	;RP0=1, select bank1
  1842  01B8  1303               	bcf	3,6	;RP1=0, select bank1
  1843  01B9  171F               	bsf	31,6	;volatile
  1844                           
  1845                           ;SYS_adc.c: 24: ADCON1bits.ADCS1 = 0;
  1846  01BA  129F               	bcf	31,5	;volatile
  1847                           
  1848                           ;SYS_adc.c: 25: ADCON1bits.ADCS0 = 1;
  1849  01BB  161F               	bsf	31,4	;volatile
  1850                           
  1851                           ;SYS_adc.c: 27: PIE1bits.ADIE = 1;
  1852  01BC  170C               	bsf	12,6	;volatile
  1853                           
  1854                           ;SYS_adc.c: 28: PIR1bits.ADIF = 0;
  1855  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  1856  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  1857  01BF  130C               	bcf	12,6	;volatile
  1858  01C0  0008               	return
  1859  01C1                     __end_of_init_adc:	
  1860                           
  1861                           	psect	text15
  1862  00B6                     __ptext15:	
  1863 ;; *************** function _f_int *****************
  1864 ;; Defined at:
  1865 ;;		line 145 in file "sources/SUP_func.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1879 ;;      Params:         0       0       0       0
  1880 ;;      Locals:         0       0       0       0
  1881 ;;      Temps:          5       0       0       0
  1882 ;;      Totals:         5       0       0       0
  1883 ;;Total ram usage:        5 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		Interrupt level 1
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           
  1893                           ;psect for function _f_int
  1894  00B6                     _f_int:	
  1895                           
  1896                           ;SUP_func.c: 147: if(INTCONbits.T0IF)
  1897  00B6  1D0B               	btfss	11,2	;volatile
  1898  00B7  28C9               	goto	i1l979
  1899                           
  1900                           ;SUP_func.c: 148: {
  1901                           ;SUP_func.c: 149: TMR0 = 0xE6;;
  1902  00B8  30E6               	movlw	230
  1903  00B9  0081               	movwf	1	;volatile
  1904                           
  1905                           ;SUP_func.c: 150: INTCONbits.T0IF = 0;
  1906  00BA  110B               	bcf	11,2	;volatile
  1907                           
  1908                           ;SUP_func.c: 151: compteur++;
  1909  00BB  3001               	movlw	1
  1910  00BC  07A0               	addwf	_compteur,f	;volatile
  1911  00BD  3000               	movlw	0
  1912  00BE  1803               	skipnc
  1913  00BF  3001               	movlw	1
  1914  00C0  07A1               	addwf	_compteur+1,f	;volatile
  1915  00C1  3000               	movlw	0
  1916  00C2  1803               	skipnc
  1917  00C3  3001               	movlw	1
  1918  00C4  07A2               	addwf	_compteur+2,f	;volatile
  1919  00C5  3000               	movlw	0
  1920  00C6  1803               	skipnc
  1921  00C7  3001               	movlw	1
  1922  00C8  07A3               	addwf	_compteur+3,f	;volatile
  1923  00C9                     i1l979:	
  1924                           
  1925                           ;SUP_func.c: 152: }
  1926                           ;SUP_func.c: 153: if(PIR1bits.ADIF)
  1927  00C9  1F0C               	btfss	12,6	;volatile
  1928  00CA  28D0               	goto	i1l985
  1929                           
  1930                           ;SUP_func.c: 154: {
  1931                           ;SUP_func.c: 155: endConv = 1;
  1932  00CB  3001               	movlw	1
  1933  00CC  00F5               	movwf	??_f_int
  1934  00CD  0875               	movf	??_f_int,w
  1935  00CE  00F4               	movwf	_endConv	;volatile
  1936                           
  1937                           ;SUP_func.c: 156: PIR1bits.ADIF = 0;
  1938  00CF  130C               	bcf	12,6	;volatile
  1939  00D0                     i1l985:	
  1940                           
  1941                           ;SUP_func.c: 157: }
  1942                           ;SUP_func.c: 164: if(PIR1bits.TXIF && tx_running)
  1943  00D0  1C8C               	btfss	12,1	;volatile
  1944  00D1  28FA               	goto	i1l102
  1945  00D2  0873               	movf	_tx_running,w
  1946  00D3  1903               	btfsc	3,2
  1947  00D4  28FA               	goto	i1l102
  1948                           
  1949                           ;SUP_func.c: 165: {
  1950                           ;SUP_func.c: 166: static uint8 txState = 0;
  1951                           ;SUP_func.c: 168: PIR1bits.TXIF = 0;
  1952  00D5  108C               	bcf	12,1	;volatile
  1953                           
  1954                           ;SUP_func.c: 169: if(txState++ < 17)
  1955  00D6  3001               	movlw	1
  1956  00D7  07F0               	addwf	f_int@txState,f
  1957  00D8  30FF               	movlw	-1
  1958  00D9  0770               	addwf	f_int@txState,w
  1959  00DA  00F5               	movwf	??_f_int
  1960  00DB  3011               	movlw	17
  1961  00DC  0275               	subwf	??_f_int,w
  1962  00DD  1803               	skipnc
  1963  00DE  28F1               	goto	i1l999
  1964                           
  1965                           ;SUP_func.c: 170: {
  1966                           ;SUP_func.c: 171: if(tx_data[17-txState] < 0xFF)
  1967  00DF  0370               	decf	f_int@txState,w
  1968  00E0  3AFF               	xorlw	255
  1969  00E1  3E11               	addlw	17
  1970  00E2  3E36               	addlw	(low (_tx_data| 0))& (0+255)
  1971  00E3  0084               	movwf	4
  1972  00E4  1383               	bcf	3,7	;select IRP bank0
  1973  00E5  0A00               	incf	0,w
  1974  00E6  1903               	btfsc	3,2
  1975  00E7  28EF               	goto	i1l997
  1976                           
  1977                           ;SUP_func.c: 172: TXREG = tx_data[17-txState];
  1978  00E8  0370               	decf	f_int@txState,w
  1979  00E9  3AFF               	xorlw	255
  1980  00EA  3E11               	addlw	17
  1981  00EB  3E36               	addlw	(low (_tx_data| 0))& (0+255)
  1982  00EC  0084               	movwf	4
  1983  00ED  0800               	movf	0,w
  1984  00EE  28F6               	goto	L3
  1985  00EF                     i1l997:	
  1986                           
  1987                           ;SUP_func.c: 173: else
  1988                           ;SUP_func.c: 174: TXREG = 0xFE;
  1989  00EF  30FE               	movlw	254
  1990  00F0  28F6               	goto	L3
  1991  00F1                     i1l999:	
  1992                           ;SUP_func.c: 175: }
  1993                           
  1994                           
  1995                           ;SUP_func.c: 176: else if(txState == 18)
  1996  00F1  3012               	movlw	18
  1997  00F2  0670               	xorwf	f_int@txState,w
  1998  00F3  1D03               	btfss	3,2
  1999  00F4  28F8               	goto	i1l1003
  2000                           
  2001                           ;SUP_func.c: 177: {
  2002                           ;SUP_func.c: 178: TXREG = 0xFF;
  2003  00F5  30FF               	movlw	255
  2004  00F6                     L3:	
  2005  00F6  0095               	movwf	21	;volatile
  2006                           
  2007                           ;SUP_func.c: 179: }
  2008  00F7  28FA               	goto	i1l102
  2009  00F8                     i1l1003:	
  2010                           
  2011                           ;SUP_func.c: 188: else
  2012                           ;SUP_func.c: 189: {
  2013                           ;SUP_func.c: 190: tx_running = 0;
  2014  00F8  01F3               	clrf	_tx_running
  2015                           
  2016                           ;SUP_func.c: 191: txState = 0;
  2017  00F9  01F0               	clrf	f_int@txState
  2018  00FA                     i1l102:	
  2019  00FA  0879               	movf	??_f_int+4,w
  2020  00FB  00FF               	movwf	127
  2021  00FC  0878               	movf	??_f_int+3,w
  2022  00FD  008A               	movwf	10
  2023  00FE  0877               	movf	??_f_int+2,w
  2024  00FF  0084               	movwf	4
  2025  0100  0E76               	swapf	(??_f_int+1)^(0+-128),w
  2026  0101  0083               	movwf	3
  2027  0102  0EFE               	swapf	126,f
  2028  0103  0E7E               	swapf	126,w
  2029  0104  0009               	retfie
  2030  0105                     __end_of_f_int:	
  2031  007E                     btemp	set	126	;btemp
  2032  007E                     wtemp0	set	126
  2033                           
  2034                           	psect	intentry
  2035  0004                     __pintentry:	
  2036                           ;incstack = 0
  2037                           ; Regs used in _f_int: [wreg-fsr0h+status,2+status,0]
  2038                           
  2039  0004                     interrupt_function:	
  2040  007E                     saved_w	set	btemp
  2041  0004  00FE               	movwf	btemp
  2042  0005  0E03               	swapf	3,w
  2043  0006  00F6               	movwf	??_f_int+1
  2044  0007  0804               	movf	4,w
  2045  0008  00F7               	movwf	??_f_int+2
  2046  0009  080A               	movf	10,w
  2047  000A  00F8               	movwf	??_f_int+3
  2048  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2049  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2050  000D  087F               	movf	btemp+1,w
  2051  000E  00F9               	movwf	??_f_int+4
  2052  000F  118A  28B6         	ljmp	_f_int


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     18      58
    BANK1            80      0       0
    BANK2            80      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(1) Largest target is 18
		 -> tx_data(BANK0[18]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 18
		 -> tx_data(BANK0[18]), 

    memcpy@s1	PTR const void  size(1) Largest target is 18
		 -> anData(BANK0[18]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 18
		 -> anData(BANK0[18]), 

    sp__memcpy	PTR void  size(1) Largest target is 18
		 -> tx_data(BANK0[18]), 

    UART_send@data	PTR struct . size(1) Largest target is 18
		 -> anData(BANK0[18]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _f_int in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_SUP_Oper
    _SUP_Oper->_SUP_UART_management
    _SUP_UART_management->_UART_send
    _UART_send->_memcpy
    _SUP_ADC_management->_ADC_get_value

Critical Paths under _f_int in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _f_int in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _f_int in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     715
                           _SUP_Init
                           _SUP_Oper
 ---------------------------------------------------------------------------------
 (1) _SUP_Oper                                             4     4      0     715
                                             14 BANK0      4     4      0
                 _SUP_ADC_management
                _SUP_UART_management
 ---------------------------------------------------------------------------------
 (2) _SUP_UART_management                                  1     1      0     607
                                             13 BANK0      1     1      0
                          _UART_send
 ---------------------------------------------------------------------------------
 (3) _UART_send                                            5     4      1     607
                                              8 BANK0      5     4      1
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               8     5      3     435
                                              0 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _SUP_ADC_management                                   1     1      0      71
                                              6 BANK0      1     1      0
                    _ADC_chan_change
                      _ADC_get_value
                     _ADC_start_conv
 ---------------------------------------------------------------------------------
 (3) _ADC_start_conv                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_get_value                                        6     4      2      40
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _ADC_chan_change                                      2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SUP_Init                                             0     0      0       0
                           _init_adc
                            _init_io
                           _init_osc
                          _init_tmr0
                          _init_uart
 ---------------------------------------------------------------------------------
 (2) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_tmr0                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_osc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_io                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _f_int                                                5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SUP_Init
     _init_adc
     _init_io
     _init_osc
     _init_tmr0
     _init_uart
   _SUP_Oper
     _SUP_ADC_management
       _ADC_chan_change
       _ADC_get_value
       _ADC_start_conv
     _SUP_UART_management
       _UART_send
         _memcpy

 _f_int (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     12      3A       3       72.5%
BITBANK1            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK1               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK2            50      0       0       6        0.0%
BANK2               50      0       0       7        0.0%
ABS                  0      0      44       8        0.0%
BITBANK0            50      0       0       9        0.0%
DATA                 0      0      44      10        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Dec 04 00:01:37 2017

                           pc 0002                   __CFG_CP$OFF 0000                            l80 00A3  
                          fsr 0004                           l616 0110                  __CFG_CPD$OFF 0000  
                         u365 014B                           fsr0 0004                           indf 0000  
                __CFG_IESO$ON 0000                          S1209 01D2         ??_SUP_UART_management 0055  
    __size_of_ADC_chan_change 000D                          l1111 004F                          l1131 0082  
                        l1115 0058                          l1053 0195                          l1127 0079  
                        l1145 00A7                          l1147 00A9                          l1095 0025  
                        l1175 013B                          l1099 002E               ?_ADC_start_conv 0075  
                        _TMR0 0001                 __CFG_FCMEN$ON 0000                          _main 0219  
                        btemp 007E                 __CFG_BOREN$ON 0000                          start 0011  
               __CFG_MCLRE$ON 0000                         ?_main 0075                 __CFG_WDTE$OFF 0000  
                       i1l102 00FA                         i1l985 00D0                         i1l979 00C9  
                       i1l997 00EF                         i1l999 00F1                         _SPBRG 0013  
                       _TXREG 0015                         _f_int 00B6            __size_of_UART_send 001E  
             __end_of_init_io 0207   __size_of_SUP_ADC_management 0095                         pclath 000A  
            __end_of_SUP_Init 01AF                         status 0003              __end_of_SUP_Oper 015C  
                       wtemp0 007E               __initialization 0013                  __end_of_main 0220  
                      ??_main 005A                        ?_f_int 0075                        _ADRESH 001E  
                      _ADRESL 009E                        i1l1003 00F8             ??_ADC_chan_change 0048  
              __CFG_PWRTE$OFF 0000                        _anData 0024             __end_of_UART_send 019A  
            __end_of_init_adc 01C1                        _memcpy 0105              __end_of_init_osc 0226  
                   ??_init_io 0048                        saved_w 007E       __end_of__initialization 001E  
              __pcstackCOMMON 0075                 __end_of_f_int 0105        __size_of_ADC_get_value 0020  
                   ?_SUP_Init 0075                     ?_SUP_Oper 0075                _OPTION_REGbits 0081  
            ??_ADC_start_conv 0048                       ??_f_int 0075                    __pbssBANK0 0020  
          __size_of_init_tmr0 000A            __size_of_init_uart 000E                    __pmaintext 0219  
                  __pintentry 0004                       ?_memcpy 0048   __end_of_SUP_UART_management 01D2  
                  ??_SUP_Init 0048                    ??_SUP_Oper 0056                     ?_init_adc 0075  
                   ?_init_osc 0075                 _ADC_get_value 015C               __size_of_memcpy 002C  
                     _endConv 0074                       __ptext1 0131                       __ptext2 01C1  
                     __ptext3 017C                       __ptext4 0105                       __ptext5 0021  
                     __ptext6 0226                       __ptext7 015C                       __ptext8 01EE  
                     __ptext9 019A                       _init_io 01FB             __end_of_init_tmr0 0211  
           __end_of_init_uart 01EE               _ADC_chan_change 01EE    __end_of_SUP_ADC_management 00B6  
                     _tx_data 0036                       clrloop0 0212          end_of_initialization 001E  
                     memcpy@d 004D                       memcpy@n 0049                       memcpy@s 004E  
              ?_ADC_get_value 0048                    ??_init_adc 0048                    ??_init_osc 0048  
    ADC_chan_change@ANChannel 0049                     _RCSTAbits 0017                     _PORTAbits 0005  
                   _UART_send 017C                     _TRISAbits 0085                     _TRISCbits 0087  
                   _TXSTAbits 0016                    _tx_running 0073                  _emission_rdy 0072  
     __end_of_ADC_chan_change 01FB                   _BAUDCTLbits 0011                    ?_UART_send 0050  
              __end_of_memcpy 0131           start_initialization 0013             __size_of_SUP_Init 0015  
           __size_of_SUP_Oper 002B               ??_ADC_get_value 004A                      ??_memcpy 004B  
                 __pbssCOMMON 0070                     ___latbits 0001                 __pcstackBANK0 0048  
        ADC_get_value@ANvalue 004C        SUP_Oper@latchSequencer 0056             __size_of_init_adc 0012  
           __size_of_init_osc 0006              ?_ADC_chan_change 0075                   ??_UART_send 0051  
                   __pswtext1 01D2                      ?_init_io 0075                  f_int@txState 0070  
              __size_of_f_int 004F                     _init_tmr0 0207                     _init_uart 01E0  
__size_of_SUP_UART_management 0011             interrupt_function 0004       __size_of_ADC_start_conv 0005  
                   clear_ram0 0211                      _PIE1bits 008C            _SUP_ADC_management 0021  
                    _PIR1bits 000C    SUP_ADC_management@sequence 0071           ?_SUP_ADC_management 0075  
                  _ADCON0bits 001F                    _ADCON1bits 009F                      _SUP_Init 019A  
                    _SUP_Oper 0131                    ?_init_tmr0 0075                    ?_init_uart 0075  
        ??_SUP_ADC_management 004E                     memcpy@tmp 004C                 UART_send@data 0054  
               UART_send@size 0050              __size_of_init_io 000C                      __ptext10 01E0  
                    __ptext11 0207                      __ptext12 0220                      __ptext13 01FB  
                    __ptext14 01AF                      __ptext15 00B6                      _compteur 0020  
                    _init_adc 01AF                 __size_of_main 0007                      _init_osc 0220  
                  _INTCONbits 000B                      memcpy@d1 004F                      memcpy@s1 0048  
                 ??_init_tmr0 0048                   ??_init_uart 0048                      intlevel1 0000  
       __end_of_ADC_get_value 017C                _ADC_start_conv 0226                    _OSCCONbits 008F  
         _SUP_UART_management 01C1          ?_SUP_UART_management 0075        __end_of_ADC_start_conv 022B  
          __CFG_FOSC$INTOSCIO 0000  
