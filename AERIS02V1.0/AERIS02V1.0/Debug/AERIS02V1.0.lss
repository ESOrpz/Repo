
AERIS02V1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006eb  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000664  00000000  00000000  00000947  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000273  00000000  00000000  00000fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036f  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001603  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 99 00 	call	0x132	; 0x132 <main>
  88:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
#include "SUP_func.h"

volatile unsigned long SUP_compteur = 0;

ISR(TIMER0_OVF_vect) // Fonction d'interruption
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	af 93       	push	r26
  a0:	bf 93       	push	r27
	TCNT0 = 0x06;
  a2:	86 e0       	ldi	r24, 0x06	; 6
  a4:	86 bd       	out	0x26, r24	; 38
	PORTD = PORTD ^ (0x02); // Inverse l'état de la pin 2 de PORTD
  a6:	9b b1       	in	r25, 0x0b	; 11
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	89 27       	eor	r24, r25
  ac:	8b b9       	out	0x0b, r24	; 11
	SUP_compteur++;
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  ba:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	a1 1d       	adc	r26, r1
  c2:	b1 1d       	adc	r27, r1
  c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  c8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  cc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  d0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
  d4:	bf 91       	pop	r27
  d6:	af 91       	pop	r26
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <SUP_initialisation>:
		DDRn = 0 & PORTn = 0 -> Simple entrée
		DDRn = 0 & PORTn = 1 -> Entrée avec pull-up
		DDRn = 1 & PORTn = 0 -> Sortie 0V
		DDRn = 1 & PORTn = 1 -> Sortie 5V	*/
	
	DDRD = 0xFF; //Toutes les pins de PORTD initialisées en sortie
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00; //Niveau logique bas
  ea:	1b b8       	out	0x0b, r1	; 11
		010 -> prescaler à 8
		011 -> 64
		100 -> 256
		101 -> 1024	*/
	
	TCCR0B = 0x02; //Prescaler à 8
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = 0x01; //Interruption authorisée
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	TCNT0 = 0x06; //Initialisation de la valeur de Timer0
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	86 bd       	out	0x26, r24	; 38
		1/20E+6 * 8 * (256 - 6) = 0.0001s	*/
	
	/* ------------------------------------------------------
		Global Interrupt enable
	------------------------------------------------------ */
	sei(); //Permet l'utilisation des interruptions
  fa:	78 94       	sei
  fc:	08 95       	ret

000000fe <SUP_operational>:
void SUP_operational()
{
	while (1)
	{
		while(SUP_compteur < CONT_1S); // On attend 10000 interruptions soit 1 seconde
		PORTD = PORTD ^ (0x01); // Inverse l'état de la pin 1 de PORTD
  fe:	21 e0       	ldi	r18, 0x01	; 1

void SUP_operational()
{
	while (1)
	{
		while(SUP_compteur < CONT_1S); // On attend 10000 interruptions soit 1 seconde
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 108:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 10c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 110:	80 31       	cpi	r24, 0x10	; 16
 112:	97 42       	sbci	r25, 0x27	; 39
 114:	a1 05       	cpc	r26, r1
 116:	b1 05       	cpc	r27, r1
 118:	98 f3       	brcs	.-26     	; 0x100 <SUP_operational+0x2>
		PORTD = PORTD ^ (0x01); // Inverse l'état de la pin 1 de PORTD
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	82 27       	eor	r24, r18
 11e:	8b b9       	out	0x0b, r24	; 11
		SUP_compteur = 0; // Réinitialisation du compteur
 120:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 124:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 128:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 12c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>

void SUP_operational()
{
	while (1)
	{
		while(SUP_compteur < CONT_1S); // On attend 10000 interruptions soit 1 seconde
 130:	e7 cf       	rjmp	.-50     	; 0x100 <SUP_operational+0x2>

00000132 <main>:
	SUP_compteur++;
}

int main(void)
{
	SUP_initialisation();
 132:	0e 94 73 00 	call	0xe6	; 0xe6 <SUP_initialisation>
	
    SUP_operational();
 136:	0e 94 7f 00 	call	0xfe	; 0xfe <SUP_operational>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
